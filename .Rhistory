values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<-c(i, sum(complete.cases(data))
}
return (data.frame(values))
}
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<-c(i, sum(complete.cases(data))
}
return (data.frame(values))
}
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<-c(i, sum(complete.cases(data))
}
return (data.frame(values))
}
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- data.frame (i, sum(complete.cases(data))
}
return (values)
}
pollutantmean <- function (directory, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- data.frame (i, sum(complete.cases(data)))
}
return (values)
}
complete("F:/R Coursera/R Programming/Week2/Assignment 1"/specdata)
pollutantmean("F:/R Coursera/specdata")
pollutantmean <- function (directory, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- sum(complete.cases(data))
}
return (data.frame(id=i, values)
}
pollutantmean <- function (directory, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- sum(complete.cases(data))
}
return (data.frame(id=i, values))
}
pollutantmean("F:/R Coursera/specdata")
pollutantmean <- function (directory, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<-data.frame()
for (i in id) {
data<-read.csv(fileList[i])
values<- sum(complete.cases(data))
}
return (data.frame(id=i, values))
}
pollutantmean("F:/R Coursera/specdata")
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data))
}
return (data.frame (id=id, values)
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (id=id, values)
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (id=i, values)
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (i, values)
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (i, values)
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (i, values)
}
pollutantmean <- function (directory, pollutant, id = 1:332) {
fileList <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values<- numeric()
for (i in id) {
data<-read.csv(fileList[i])
values<- return (sum(complete.cases(data)))
}
return (data.frame (i, values))
}
pollutantmean("F:/R Coursera/specdata")
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
moni_i <- read.csv(files_full[i])
nobs <- sum(complete.cases(moni_i))
tmp <- data.frame(i, nobs)
dat <- rbind(dat, tmp)
}
colnames(dat) <- c("id", "nobs")
dat
}
Part 3
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
moni_i <- read.csv(files_full[i])
nobs <- sum(complete.cases(moni_i))
tmp <- data.frame(i, nobs)
dat <- rbind(dat, tmp)
}
colnames(dat) <- c("id", "nobs")
dat
}
complete("F:/R Coursera/specdata")
corr <- function(directory, threshold = 0) {
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i])
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
dat
}
corr
corr("F:/R Coursera/specdata")
for (i in seq_along(x)) {
print(x[i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print (x[i,j])
}
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print (x[j,i])
}
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print (x[i])
}
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
print (x[i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(ncol(x))) {
print (x[i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
print (x[i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(ncol(x))) {
print (x[,i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(ncol(x))) {
print (x[i,])
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
print (x[,i])
}
x<- matrix (1:6,2,3)
for (i in seq_len(nrow(x))) {
print (x)
}
columnmean<- function(y){
nc<- ncol (y)
means <-numeric (nc)
for (i in 1:nc){
means[i]<- mean(y[,i])
}
means
}
columnmean(1:50, 5,10)
m<- matrix(1:50,5,10)
columnmean(m)
m
x<- m([,1])
x<- m[,1]
x
set.seed(20)
x<-rnorm(100)
e<-rnorm(100, 0, 2)
y<- 0.5 + 2*x + e
summary (y)
Min. 1st Qu. Median
set.seed(20)
x<-rnorm(100)
e<-rnorm(100, 0, 2)
y<- 0.5 + 2*x + e
summary (y)
Min. 1st Qu. Median
plot(x,y)
set.seed(20)
x<-rbinom(100)
e<-rnorm(100, 0, 2)
y<- 0.5 + 2*x + e
summary (y)
Min. 1st Qu. Median
plot(x,y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(550)
ucscDb<- dbConnect (MySql(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery (ucscDb, "show database;"); dbDisconnect (ucscDb);
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/win-library/3.3")
ucscDb<- dbConnect (MySql(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery (ucscDb, "show database;"); dbDisconnect (ucscDb);
ucscDb<- dbConnect (MySql(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery (ucsDb, "show database;"); dbDisconnect (ucscDb);
ucscDb<- dbConnect (MySql(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery (ucscDb, "show database;"); dbDisconnect (ucscDb);
ucscDb<- dbConnect (MySql(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery (ucscDb, "show database;");
dbDisconnect (ucscDb);
v<- rbinom(100,7,0.3)
barplot(table(v))
v<- rhyper(100,7,0.3)
barplot(table(v))
n<- rnorm(100,50,4)
+
plot(table(n))
lineplot(table(v))
set.seed(131)
x<- data.frame("var1" = sample(1:5),"var2" = sample(6:10, "var3" = sample(11:15)))
x<--x[sample(1:5),]; x$var2[c(1,3)] = NA
x
set.seed(131)
x<- data.frame("var1"=sample(1:5),"var2" = sample(6:10, "var3"=sample(11:15)))
x<--x[sample(1:5),]; x$var2[c(1,3)] = NA
x
set.seed(131)
x<- data.frame("var1"=sample(1:5),"var2" = sample(6:10), "var3"=sample(11:15)))
x<--x[sample(1:5),]; x$var2[c(1,3)] = NA
x
set.seed(131)
x <- data.frame("var1"=sample(1:5),"var2" = sample(6:10), "var3"=sample(11:15)))
set.seed(131)
x <- data.frame("var1"=sample(1:5),"var2" = sample(6:10), "var3"=sample(11:15))
x<--x[sample(1:5),]; x$var2[c(1,3)] = NA
x
set.seed(135661)
x <- data.frame("var1"=sample(1:5),"var2" = sample(6:10), "var3"=sample(11:15))
x<--x[sample(1:5),]; x$var2[c(1,3)] = NA
x
set.seed(13435)
x<- data.frame("var1"=sample(1:5),"var2" = sample(6:10), "var3"=sample(11:15))
x<-x[sample(1:5),]; x$var2[c(1,3)] = NA
x
x[,1]
x[1,]
x[,"var1"]
x
x[2,]
x[order(x$var1),]
source('~/.active-rstudio-document')
read
library("dplyr", lib.loc="~/R/win-library/3.3")
library("data.table", lib.loc="~/R/win-library/3.3")
readData<-read.csv("F:\\R Coursera\\data\\Restaurants.csv")
readData
head(readData)
tail(readData)
summary(readData)
str(readData)
table(readData$councilDistrict, readData$zipCode)
library(xlsx)
x<- table(readData$councilDistrict, readData$zipCode)
x
write.xlsx(x, "F:\\x.xlsx")
colSums(is.na(readData))
install.packages("dplyr")
library(dplyr)
date
date()
## Download the zip file
setwd("F:\\R Coursera\\data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="F:\\R Coursera\\data\\rProject.zip")
## Unzip DataSet in directory
unzip(zipfile="F:\\R Coursera\\data\\rProject.zip", exdir="F:\\R Coursera\\data")
###Load required packages
library(dplyr)
library(data.table)
library(tidyr)
dataLocation <- "F:\\R Coursera\\data\\UCI HAR Dataset"
# Read subject files
dataSubTrain <- tbl_df(read.table(file.path(dataLocation, "train", "subject_train.txt")))
dataSubTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(dataLocation, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(dataLocation, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "X_test.txt" )))
## Merge the training and the test subject data tables by row binding
dataSub <- rbind(dataSubTrain, dataSubTest)
## Rename variable as "subject"
setnames(dataSub, "V1", "subject")
## Merge the training and the test activity data tables by row binding
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
## Rename variable as "activity"
setnames(dataActivity, "V1", "activity")
## Merge the training and test data table
dataTable <- rbind(dataTrain, dataTest)
# Read features file
dataFeatures <- tbl_df(read.table(file.path(dataLocation, "features.txt")))
## Name variables according to features
setnames(dataFeatures, names(dataFeatures), c("feature", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
## Column names for activity labels
activityLabels<- tbl_df(read.table(file.path(dataLocation, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activity","activityName"))
# Merge columns
dataSubjAct<- cbind(dataSub, dataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
## Read "features.txt" and extract the mean and standard deviation
FeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE)
# TakE only measurements for the mean and standard deviation and add "subject","activity"
FeaturesMeanStd <- union(c("subject","activity"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
## Enter name of activity into dataTable
dataTable <- merge(activityLabels, dataTable , by="activity", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
## Create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
## Download the zip file
setwd("F:\\R Coursera\\data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="F:\\R Coursera\\data\\rProject.zip")
## Unzip DataSet in directory
unzip(zipfile="F:\\R Coursera\\data\\rProject.zip", exdir="F:\\R Coursera\\data")
###Load required packages
library(dplyr)
library(data.table)
library(tidyr)
dataLocation <- "F:\\R Coursera\\data\\UCI HAR Dataset"
# Read subject files
dataSubTrain <- tbl_df(read.table(file.path(dataLocation, "train", "subject_train.txt")))
dataSubTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(dataLocation, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(dataLocation, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "X_test.txt" )))
## Merge the training and the test subject data tables by row binding
dataSub <- rbind(dataSubTrain, dataSubTest)
## Rename variable as "subject"
setnames(dataSub, "V1", "subject")
## Merge the training and the test activity data tables by row binding
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
## Rename variable as "activity"
setnames(dataActivity, "V1", "activity")
## Merge the training and test data table
dataTable <- rbind(dataTrain, dataTest)
# Read features file
dataFeatures <- tbl_df(read.table(file.path(dataLocation, "features.txt")))
## Name variables according to features
setnames(dataFeatures, names(dataFeatures), c("feature", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
## Column names for activity labels
activityLabels<- tbl_df(read.table(file.path(dataLocation, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activity","activityName"))
# Merge columns
dataSubjAct<- cbind(dataSub, dataActivity)
dataTable <- cbind(dataSubjAct, dataTable)
## Read "features.txt" and extract the mean and standard deviation
FeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE)
# TakE only measurements for the mean and standard deviation and add "subject","activity"
FeaturesMeanStd <- union(c("subject","activity"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
## Enter name of activity into dataTable
dataTable <- merge(activityLabels, dataTable , by="activity", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
## Create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
## Download the zip file
setwd("F:\\R Coursera\\data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="F:\\R Coursera\\data\\rProject.zip")
## Unzip DataSet in directory
unzip(zipfile="F:\\R Coursera\\data\\rProject.zip", exdir="F:\\R Coursera\\data")
###Load required packages
library(dplyr)
library(data.table)
library(tidyr)
dataLocation <- "F:\\R Coursera\\data\\UCI HAR Dataset"
# Read subject files
dataSubTrain <- tbl_df(read.table(file.path(dataLocation, "train", "subject_train.txt")))
dataSubTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(dataLocation, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(dataLocation, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(dataLocation, "test" , "X_test.txt" )))
## Merge the training and the test subject data tables by row binding
dataSub <- rbind(dataSubTrain, dataSubTest)
## Rename variable as "subject"
setnames(dataSub, "V1", "subject")
## Merge the training and the test activity data tables by row binding
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
## Rename variable as "activity"
setnames(dataActivity, "V1", "activity")
## Merge the training and test data table
dataTable <- rbind(dataTrain, dataTest)
# Read features file
dataFeatures <- tbl_df(read.table(file.path(dataLocation, "features.txt")))
## Name variables according to features
setnames(dataFeatures, names(dataFeatures), c("feature", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
## Column names for activity labels
activityLabels<- tbl_df(read.table(file.path(dataLocation, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activity","activityName"))
# Merge columns
dataSubjAct<- cbind(dataSub, dataActivity)
dataTable <- cbind(dataSubjAct, dataTable)
## Read "features.txt" and extract the mean and standard deviation
FeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE)
# TakE only measurements for the mean and standard deviation and add "subject","activity"
FeaturesMeanStd <- union(c("subject","activity"), FeaturesMeanStd)
dataTable<- subset(dataTable,select= FeaturesMeanStd)
## Enter name of activity into dataTable
dataTable <- merge(activityLabels, dataTable , by="activity", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
## Create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
summarise(dataTable)
dataTable
summary(dataTable)
